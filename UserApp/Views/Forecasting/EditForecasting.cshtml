@model Infrastrucutre.Core.Models.Models.ForecastingItemSummary
@{
    ViewBag.Title = "EditItemForecasting";
    Layout = "~/Views/shared/_ForecastingLayout.cshtml";
}



<style>
    div.jtable-main-container > table.jtable > thead th.jtable-column-header div.jtable-column-header-container {
        height: 60px;
        margin-left: 4px;
    }
</style>

<div class="row-fluid">
    <div class="span12 control-group">
        <h2 style="text-align:center;color: green;">Edit Item Forecasting</h2>
    </div>
</div>

<div class="row-fluid" style="margin-left:2%;width:96.5%">
    <div class="span1 control-group" style="margin-left: 0%;">
        @Html.LabelFor(model => model.OrderId, "Order Id", new { @class = "control-label", @style = "margin-top: 0%;" })
        @Html.TextBoxFor(model => model.OrderId, "", new { id= "orderId", @class = "span12", @readonly = "readonly", @style = "width:315%" })
    </div>
</div>

<div id="gridItemForecasting" style="width:96.5%;margin-left:2%;"></div>

<div class="row-fluid" style="margin-left:2%;width:96.5%">
    <div class="span1 control-group">
        <button style="margin-left: 2%; width: 210%; margin-top: 23%; font-weight: bold;" class="btn" id="LoadProceedData" onclick="ProceedData()" type="button">Proceed</button>
    </div>
</div>

<hr />
<input id="userName" type="hidden" value="@ViewBag.UserName" />

<div class="row-fluid" style="margin-left:2%;width:96.5%">
    <div class="span2 control-group">
        @Html.LabelFor(model => model.ForecastingQty, "Forecasting Qty", new { @class = "control-label", })
        @Html.TextBoxFor(model => model.ForecastingQty, "", new { id= "forecastingQty", @class = "span12", @style = "width:110.5%", @readonly = "readonly" })
    </div>
    <div class="span2 control-group">
        @Html.LabelFor(model => model.TotalSoldQty, "Total Sold Qty", new { @class = "control-label", @style = "margin-top: 0%;" })
        @Html.TextBoxFor(model => model.TotalSoldQty, "", new { id= "totalSoldQty", @class = "span12", @readonly = "readonly",  @style = "width:108%" })
    </div>
    <div class="span2 control-group">
        @Html.LabelFor(model => model.SupplierName, "Supplier / Manufacture Name", new { @class = "control-label", @style = "margin-top: 0%;" })
        @Html.TextBoxFor(model => model.SupplierName, "", new { id= "supplierOrManufactureName", @class = "span12", @style = "width:110.5%" })
    </div>
    <div class="span3 control-group">
        @Html.LabelFor(model => model.BatchNo, "Batch No", new { @class = "control-label", @style = "margin-top: 0%;" })
        @Html.TextBoxFor(model => model.BatchNo, "", new { id= "batchNo", @class = "span12", @style = "width:108%" })
    </div>
    <div class="span3 control-group">
        <label class="control-label">Date</label>
        @Html.TextBoxFor(model => model.OrderDate, new
        {
            id="txtDate",
            @class = "span12 datepicker",
            @readonly = "readonly",
            @style = "cursor:pointer; background-color:white",
            @placeholder = "From Date"
        })
    </div>
</div>

<div class="row-fluid" style="margin-left:2%;width:96.5%">
    <div class="span2 control-group">
        @Html.LabelFor(model => model.TotalCVM, "Total CBM", new { @class = "control-label", })
        @Html.TextBoxFor(model => model.TotalCVM, "", new { id= "totalCBM", @class = "span12", @style = "width:110.5%",  @readonly = "readonly" })
    </div>
    <div class="span2 control-group">
        @Html.LabelFor(model => model.SupplierCurrency, "Supp Currency", new { @class = "control-label", @style = "margin-top: 0%;" })
        @Html.TextBoxFor(model => model.SupplierCurrency, "", new { id= "supplierCurrency", @class = "span12", @style = "width:108%" })
    </div>
    <div class="span2 control-group">
        @Html.LabelFor(model => model.SupplierCost, "Supp Cost", new { @class = "control-label", @style = "margin-top: 0%;" })
        @Html.TextBoxFor(model => model.SupplierCost, "", new { id= "supplierCost", @class = "span12", @style = "width:110.5%", @type = "number", @min = 0 })
    </div>
    <div class="span3 control-group">
        @Html.LabelFor(model => model.TotalQty, "Final Order Total Qty", new { @class = "control-label", @style = "margin-top: 0%;" })
        @Html.TextBoxFor(model => model.TotalQty, "", new { id="totalQty", @class = "span12", @style = "width:108%", @readonly = "readonly"})
    </div>
    <div class="span3 control-group">
        @Html.LabelFor(model => model.TotalValue, "Total Value", new { @class = "control-label", @style = "margin-top: 0%;" })
        @Html.TextBoxFor(model => model.TotalValue, "", new { id="totalValue", @class = "span12", @readonly = "readonly" })
    </div>
</div>

<div class="row-fluid" style="margin-left:2%;width:96.5%">
    <div class="span2 control-group">
        @Html.LabelFor(model => model.TotalBox, "Total Box", new { @class = "control-label", })
        @Html.TextBoxFor(model => model.TotalBox, "", new { id = "totalBox", @class = "span12", @style = "width:110.5%", @readonly = "readonly" })
    </div>
    <div class="span2 control-group">
        @Html.LabelFor(model => model.PortOfLoading, "Port of Loading", new { @class = "control-label", })
        @Html.TextBoxFor(model => model.PortOfLoading, "", new { id = "portOfLoading", @class = "span12", @style = "width:108.5%" })
    </div>
    <div class="span2 control-group">
        @Html.LabelFor(model => model.LeadTime, "Shipping Days/Lead Time", new { @class = "control-label", })
        @Html.TextBoxFor(model => model.LeadTime, "", new { id = "leadTime", @class = "span12", @readonly = "readonly", @style = "width:110.5%" })
    </div>
    <div class="span3 control-group">
        @Html.LabelFor(model => model.Comments, "Comments", new { @class = "control-label", @style = "margin-top: 0%;" })
        @Html.TextBoxFor(model => model.Comments, "", new { id = "comments", @class = "span12", @style = "width:108.5%" })
    </div>
    <div class="span2 control-group">
        <button style="margin-left: 0.5%; width: 158.5%; margin-top: 9.2%; font-weight: bold;" class="btn" id="LoadProceedData" onclick="SaveData()" type="button">Save</button>
    </div>
</div>


<script>
    $(document).ready(pageLoad);

    function pageLoad() {
        $(".datepicker").datepicker();
        $(".datepicker").datepicker("option", "dateFormat", "d M, y");

        FindForecastingItemListData();
    }

    const months = [
        'Jan',
        'Feb',
        'Mar',
        'Apr',
        'May',
        'Jun',
        'Jul',
        'Aug',
        'Sep',
        'Oct',
        'Nov',
        'Dec'
    ]

    function FindForecastingItemListData() {

        var url = "@Url.Action("GetItemForecastingListDataById", "Forecasting")?id=" + @ViewBag.Id;

        $.ajax({
            type: "GET",
            url: url,
            contentType: false,
            processData: false,
            success: function (response) {
                if (response.output == 'success') {
                    var gridDataSource = response.returnvalue;

                    var grid = $("#gridItemForecasting").data("kendoGrid");
                    var dataS = grid.dataSource;
                    var total = 0;
                    $.each(gridDataSource, function (idx, row) {
                        dataS.insert(total, row);
                    });
                }
            }
        });
    }

    function ProceedData() {

        var supplierCost = $('#supplierCost').val();

        var gridItemForecasting = $("#gridItemForecasting").data("kendoGrid").dataSource.data();
        var total = parseFloat(0.0);
        var finalOrder = parseFloat(0.0);
        var totalBox = parseFloat(0.0);

        for (var x = 0; x < gridItemForecasting.length; x++)
        {
            total = total + gridItemForecasting[x].Total;
            finalOrder = finalOrder + gridItemForecasting[x].FinalOrder;
            totalBox = totalBox + gridItemForecasting[x].TotalCarton;
        }

        $('#totalCBM').val(total);
        $('#totalQty').val(finalOrder);
        $('#totalBox').val(totalBox);

        var totalValue = parseFloat(supplierCost) * parseFloat(finalOrder);
        $('#totalValue').val(parseFloat(totalValue).toFixed(2));
    }

    $("#supplierCost").keyup(function () {
        if ($('#supplierCost').val() >= 0) {
            var supplierCost = parseFloat($('#supplierCost').val());
            var finalOrder = parseFloat($('#totalQty').val());
            var totalValue = parseFloat(supplierCost) * parseFloat(finalOrder);
            $('#totalValue').val(parseFloat(totalValue).toFixed(2));
        }
    });

    function SaveData() {

        const orderDate = `${new Date($('#txtDate').val()).getDate()} ${months[new Date($('#txtDate').val()).getMonth()]}, ${new Date($('#txtDate').val()).getFullYear()}`;
        var forecastingItemList = [];

        var forecastingItemSummary = {
            Id: @ViewBag.Id,
            OrderId: $('#orderId').val(),
            SupplierName: $('#supplierOrManufactureName').val(),
            //ForecastingQty: $('#forecastingQty').val(),
            //TotalSoldQty: $('#totalSoldQty').val(),
            BatchNo: $('#batchNo').val(), 
            OrderDate: orderDate, 
            TotalCVM: $('#totalCBM').val(), 
            SupplierCurrency: $('#supplierCurrency').val(), 
            SupplierCost: $('#supplierCost').val(), 
            TotalQty: $('#totalQty').val(), 
            TotalValue: $('#totalValue').val(), 
            TotalBox: $('#totalBox').val(), 
            PortOfLoading: $('#portOfLoading').val(), 
            Comments: $('#comments').val(), 
            UpdatedBy: $('#userName').val(), 
            UpdatedDate: new Date() 
        };

        var forecastinGrid = $("#gridItemForecasting").data("kendoGrid").dataSource.data();

        for (var i = 0; i < forecastinGrid.length; i++) {

            var forecastinGridDetails = {
                OrderId: $('#orderId').val(),
                ItemMasterID: $('#ItemMasterID').val(),
                SellerID: forecastinGrid[i].SellerID,
                SKU: forecastinGrid[i].SKU,
                FNSKU: forecastinGrid[i].FNSKU,
                QuantitySold: forecastinGrid[i].QuantitySold,
                TotalSold: forecastinGrid[i].TotalSold,
                AvgSoldPercentage: forecastinGrid[i].AvgSoldPercentage,
                AvgSold: forecastinGrid[i].AvgSold,
                TotalQtyNeeded: forecastinGrid[i].TotalQtyNeeded,
                OrderByFNSKU: forecastinGrid[i].OrderByFNSKU,
                FinalOrder: forecastinGrid[i].FinalOrder,
                QtyPerCarton: forecastinGrid[i].QtyPerCarton,
                TotalCarton: forecastinGrid[i].TotalCarton,
                BoxDim: forecastinGrid[i].BoxDim,
                CBM3: forecastinGrid[i].CBM3,
                Total: forecastinGrid[i].Total,
                CreatedBy: $('#userName').val(),
                CreatedDate: new Date()
            };
            forecastingItemList.push(forecastinGridDetails);
        }

        var forecastingModel = {
            ForecastingItemSummary: forecastingItemSummary,
            ForecastingItems: forecastingItemList
        };

        var forecastingDataModel = JSON.stringify(forecastingModel);

        var data = new FormData();

        data.append("ForecastingDataModel", forecastingDataModel);

        var actionurl = "@Url.Action("UpdateItemForecasting", "Forecasting")";

        Loading(true);

        $.ajax({
            type: "POST",
            url: actionurl,
            data: data,
            processData: false,
            contentType: false,
            async: false,
            success: function (data) {
                Loading(false);
                if (data.output === "success") {
                    alert("Data saved successfully!!");
                    //swal("Success", "Data Saved Successfully!!", "success");
                    //swal("Data Saved Successfully!!");
                    window.location.href = '/Forecasting/ItemForecastingList';
                    return false;
                } else {
                    swal("Oops!", "Something Went Wrong!!", "error");
                    return false;
                }
            }
        });
    }

    $("#gridItemForecasting").kendoGrid({
        dataSource: {
            schema: {
                model: {
                    fields: {
                        Id: { type: "string", hidden: true },
                        OrderId: { type: "string", hidden: true },
                        ItemMasterID: { type: "string", hidden: true },
                        SellerID: { type: "string", editable: false},
                        SKU: { type: "string", editable: false},
                        FNSKU: { type: "string", editable: false},
                        QuantitySold: { type: "number", editable: false},
                        TotalSold: { type: "number", editable: false},
                        AvgSoldPercentage: { type: "number", editable: false},
                        AvgSold: { type: "number", editable: false},
                        TotalQtyNeeded: { type: "number", editable: false},
                        OrderByFNSKU: { type: "number", editable: false },
                        FinalOrder: { type: "number", editable: true },
                        QtyPerCarton: { type: "number", editable: false},
                        TotalCarton: { type: "number", editable: false},
                        BoxDim: { type: "string", editable: false},
                        CBM3: { type: "number", editable: false},
                        Total: { type: "number", editable: false}
                    }
                }
            },
            aggregate: [
                { field: 'QuantitySold', aggregate: 'sum' },
                /*{ field: 'TotalSold', aggregate: 'sum' },*/
                { field: 'AvgSold', aggregate: 'sum' },
                { field: 'OrderByFNSKU', aggregate: 'sum'},
                { field: 'FinalOrder', aggregate: 'sum' },
                { field: 'TotalCarton', aggregate: 'sum' },
                { field: 'Total', aggregate: 'sum'}
            ],
        },
        height: 300,
        scrollable: true,
        editable: true,
        resizable: true,
        sortable: true,
        selectable: true,
        columns: [
            {
                field: "Id",
                title: "Id",
                hidden: true
            },
            {
                field: "OrderId",
                title: "OrderId",
                hidden: true
            },
            {
                field: "ItemMasterID",
                title: "ItemMasterID",
                hidden: true
            },
            {
                field: "SellerID",
                title: "Brand"
            },
            {
                field: "SKU",
                title: "SKU"
            },
            {
                field: "FNSKU",
                title: "FNSKU"
            },
            {
                field: 'QuantitySold',
                title: 'Qty Sold',
                template: '<span style=\'float:right;\'>#=QuantitySold#</span>',
                aggregates: 'sum',
                footerTemplate: '<span id=\'footerPlaceholder\' style=\'float:right;font-weight: bold;\'>#=sum#</span>'
            },
            {
                field: "TotalSold",
                title: "Total Sold",
                //template: '<span style=\'float:right;\'>#=TotalSold#</span>',
                //aggregates: 'sum',
                //footerTemplate: '<span id=\'footerPlaceholder\' style=\'float:right;font-weight: bold;\'>#=sum#</span>'
            },
            {
                field: "AvgSoldPercentage",
                title: "Avg %",
                hidden: true
            },
            {
                field: "AvgSold",
                title: "Avg.FNSKU(%)",
                template: '<span style=\'float:right;\'>#=AvgSold#</span>',
                aggregates: 'sum',
                footerTemplate: '<span id=\'footerPlaceholder\' style=\'float:right;font-weight: bold;\'>#=sum#</span>'
            },
            {
                field: "TotalQtyNeeded",
                title: "Target Qty"
            },
            {
                field: "OrderByFNSKU",
                title: "Order/FNSKU",
                template: '<span style=\'float:right;\'>#=OrderByFNSKU#</span>',
                aggregates: 'sum',
                footerTemplate: '<span id=\'footerPlaceholder\' style=\'float:right;font-weight: bold;\'>#=sum#</span>'
            },
            {
                field: "FinalOrder",
                title: "Final Order",
                template: '<span style=\'float:right;\'>#=FinalOrder#</span>',
                aggregates: 'sum',
                footerTemplate: '<span id=\'footerPlaceholder\' style=\'float:right;font-weight: bold;\'>#=sum#</span>'
            },
            {
                field: "QtyPerCarton",
                title: "Qty/Carton"
            },
            {
                field: "TotalCarton",
                title: "Total Carton",
                template: '<span style=\'float:right;\'>#=TotalCarton#</span>',
                aggregates: 'sum',
                footerTemplate: '<span id=\'footerPlaceholder\' style=\'float:right;font-weight: bold;\'>#=sum#</span>'
            },
            {
                field: "BoxDim",
                title: "Carton Dim"
            },
            {
                field: "CBM3",
                title: "CBM/Carton"
            },
            {
                field: "Total",
                title: "Total CBM/FNSKU",
                template: '<span style=\'float:right;\'>#=Total#</span>',
                aggregates: 'sum',
                footerTemplate: '<span id=\'footerPlaceholder\' style=\'float:right;font-weight: bold;\'>#=sum#</span>'

            },
            {
                title: "Process",
                template: "<button class='remove k-button'>Remove</button>",
                width: "90px"
            }
        ],

        edit: function (e) {
            var input = e.container.find("input");
            setTimeout(function () { input.select(); }, 25);

            var columnIndex = this.cellIndex(e.container);
        },

        save: function (e) {
            if (e.values.FinalOrder >= 0) {
                var sumQuantitySold = parseFloat(+e.model.QuantitySold);
                e.model.fields["QuantitySold"].editable = true;
                e.model.set("QuantitySold", parseFloat(sumQuantitySold).toFixed(2));
                e.model.fields["QuantitySold"].editable = false;

                //var sumTotalSold = parseFloat(+e.model.TotalSold);
                //e.model.fields["TotalSold"].editable = true;
                //e.model.set("TotalSold", parseFloat(sumTotalSold).toFixed(2));
                //e.model.fields["TotalSold"].editable = false;

                var sumAvgSold = parseFloat(+e.model.AvgSold);
                e.model.fields["AvgSold"].editable = true;
                e.model.set("AvgSold", parseFloat(sumAvgSold).toFixed(2));
                e.model.fields["AvgSold"].editable = false;

                var sumOrderByFNSKU = parseFloat(+e.model.OrderByFNSKU);
                e.model.fields["OrderByFNSKU"].editable = true;
                e.model.set("OrderByFNSKU", parseFloat(sumOrderByFNSKU).toFixed(2));
                e.model.fields["OrderByFNSKU"].editable = false;

                var sumFinalOrder = parseFloat(+e.model.FinalOrder);
                e.model.fields["FinalOrder"].editable = true;
                e.model.set("FinalOrder", parseFloat(sumFinalOrder).toFixed(2));
                //e.model.fields["FinalOrder"].editable = false;

                var sumTotalCarton = parseFloat(+e.model.TotalCarton);
                e.model.fields["TotalCarton"].editable = true;
                e.model.set("TotalCarton", parseFloat(sumTotalCarton).toFixed(2));
                e.model.fields["TotalCarton"].editable = false;

                var sumTotal = parseFloat(+e.model.Total);
                e.model.fields["Total"].editable = true;
                e.model.set("Total", parseFloat(sumTotal).toFixed(2));
                e.model.fields["Total"].editable = false;


                var totalCarton = 0;
                if (+e.model.QtyPerCarton != 0) {
                    totalCarton = parseFloat(e.values.FinalOrder) / parseFloat(+e.model.QtyPerCarton);
                }

                e.model.fields["TotalCarton"].editable = true;
                e.model.set("TotalCarton", parseFloat(totalCarton).toFixed(2));
                e.model.fields["TotalCarton"].editable = false;

                var total = parseFloat(totalCarton * parseFloat(+e.model.CBM3)).toFixed(2);

                e.model.fields["Total"].editable = true;
                e.model.set("Total", parseFloat(total).toFixed(2));
                e.model.fields["Total"].editable = false;

                e.sender.refresh();
            }
        }
    }).data("kendoGrid");

    function weightEditor(container, options) {
        $('<input name="' + options.field + '"/>')
            .appendTo(container)
            .kendoNumericTextBox({
                decimals: 4,
        })
    };

    $("#gridItemForecasting").on("click", "button.remove", function () {
        var $tr = $(this).closest("tr"),
            grid = $("#gridItemForecasting").data("kendoGrid");

        grid.removeRow($tr);
    });
</script>
